/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

syntax = "proto3";
package proto;

option java_package = "org.apache.pulsar.functions.proto";
option java_outer_classname = "Function";

message FunctionConfig {
    enum ProcessingGuarantees {
        ATLEAST_ONCE = 0; // [default value]
        ATMOST_ONCE = 1;
        EFFECTIVELY_ONCE = 2;
    }
    enum SubscriptionType {
        SHARED = 0;
        EXCLUSIVE = 1;
    }
    enum Runtime {
        JAVA = 0;
        PYTHON = 1;
    }
    string tenant = 1;
    string namespace = 2;
    string name = 3;
    string className = 4;
    // map from input topic name to serde
    map<string, string> customSerdeInputs = 5;
    string outputSerdeClassName = 6;
    string output = 7;
    string logTopic = 8;
    ProcessingGuarantees processingGuarantees = 9;
    map<string,string> userConfig = 10;
    SubscriptionType subscriptionType = 11;
    Runtime runtime = 12;
    bool autoAck = 13;
    repeated string inputs = 14;
    int32 parallelism = 15;
}

message PackageLocationMetaData {
    string packagePath = 1;
}

message FunctionMetaData {
    FunctionConfig functionConfig = 1;
    PackageLocationMetaData packageLocation = 2;
    uint64 version = 3;
    uint64 createTime = 4;
}

message Snapshot {
    repeated FunctionMetaData functionMetaDataList = 1;
    bytes lastAppliedMessageId = 2;
}

message Instance {
    FunctionMetaData functionMetaData = 1;
    int32 instanceId = 2;
}

message Assignment {
    Instance instance = 1;
    string workerId = 2;
}
